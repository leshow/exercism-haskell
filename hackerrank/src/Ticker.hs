module Ticker where

import qualified Data.Vector                        as V
import           Data.Vector                         ( (!)
                                                     , (//)
                                                     )
import           Data.Char                           ( chr )

interpreter :: String -> String
interpreter input = parse (V.fromList [0]) 0 input ""
  where
    parse _ _ [] out = reverse out
    parse mem sel (x : xs) out
        | x == '<'  = parse mem (sel + 1) xs out
        | x == '>'  = parse mem (sel - 1) xs out
        | x == '*'  = parse mem sel xs (chr addAscii : out)
        | x == '+'  = parse incSel sel xs out
        | x == '-'  = parse decSel sel xs out
        | x == '/'  = parse (update $ const 0) 0 xs out
        | x == '!'  = parse addData sel xs out
        | otherwise = error "Error parsing"
      where
        addData = V.snoc mem 0
        update f = let val = mem ! sel in mem // [(sel, f val)]
        decSel   = update $ \val -> mod (val - 1) 256
        incSel   = update $ \val -> mod (val + 1) 256
        addAscii = mem ! sel


test =
    interpreter

